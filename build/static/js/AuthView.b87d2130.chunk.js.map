{"version":3,"sources":["components/AuthForm/AuthForm.module.css","views/AuthView/AuthView.module.css","assets/icons/google-logo.png","components/AuthForm/AuthForm.js","views/AuthView/AuthView.js"],"names":["module","exports","AuthForm","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","target","name","value","handleClick","event","preventDefault","buttonName","dataset","auth","trim","alert","isEmailAndPasswordFill","authOperations","logIn","register","className","s","form","para","btnWrapper","href","gBtn","type","gLogo","src","gIcon","alt","secondPara","innerForm","input","placeholder","onChange","required","btnWrapperBottom","data-auth","regBtn","onClick","AuthView","wrapper","innerWrapper","header"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,WAAa,6BAA6B,KAAO,uBAAuB,WAAa,6BAA6B,MAAQ,wBAAwB,iBAAmB,mCAAmC,MAAQ,wBAAwB,OAAS,yBAAyB,MAAQ,wBAAwB,UAAY,8B,oBCApYD,EAAOC,QAAU,CAAC,QAAU,0BAA0B,aAAe,+BAA+B,OAAS,yBAAyB,KAAO,yB,mICD9H,MAA0B,wC,OCc1B,SAASC,IAAY,IAAD,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,OAEDF,mBAAS,IAFR,mBAE1BG,EAF0B,KAEhBC,EAFgB,KAG3BC,EAAWC,cAWXC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOP,EAASQ,GAClB,IAAK,WACH,OAAON,EAAYM,GACrB,QACE,SAgBAC,EAAc,SAAAC,GAClBA,EAAMC,iBACN,IAAMC,EAAaF,EAAMJ,OAAOO,QAAQC,KACxC,GAV6B,SAACf,EAAOE,GACrC,SAAKF,EAAMgB,SAAWd,EAASc,SACtBC,MAAM,oCAQXC,CAAuBlB,EAAOE,GAChC,OAAQW,GACN,IAAK,QAEH,YADAT,EAASe,IAAeC,MAAM,CAAEpB,QAAOE,cAEzC,IAAK,MAEH,YADAE,EAASe,IAAeE,SAAS,CAAErB,QAAOE,cAE5C,QACE,OAvBND,EAAS,IACTE,EAAY,KAoCd,OACE,sBAAKmB,UAAWC,IAAEC,KAAlB,UACE,mBAAGF,UAAWC,IAAEE,KAAhB,2DACA,qBAAKH,UAAWC,IAAEG,WAAlB,SACE,oBAAGC,KAAK,6DAAR,UACE,wBAAQL,UAAWC,IAAEK,KAAMC,KAAK,SAAhC,oBAGA,qBAAKP,UAAWC,IAAEO,MAAOC,IAAKC,EAAOC,IAAK,eAG9C,mBAAGX,UAAWC,IAAEW,WAAhB,2CACA,uBAAMZ,UAAWC,IAAEY,UAAnB,UACE,gCACE,uBACEb,UAAWC,IAAEa,MACb5B,KAAK,QACLqB,KAAK,QACLQ,YAAY,QACZC,SAAUhC,EACViC,UAAQ,EACR9B,MAAOT,MAGX,gCACE,uBACEsB,UAAWC,IAAEa,MACbP,KAAK,WACLrB,KAAK,WACL6B,YAAY,WACZC,SAAUhC,EACViC,UAAQ,EACR9B,MAAOP,MAGX,sBAAKoB,UAAWC,IAAEiB,iBAAlB,UACE,wBAAQC,YAAU,QAAQnB,UAAWC,IAAEmB,OAAQC,QAASjC,EAAxD,oBAGA,wBAAQ+B,YAAU,MAAMnB,UAAWC,IAAEmB,OAAQC,QAASjC,EAAtD,+B,sBC/FKkC,EAjBE,WACf,OACE,sBAAKtB,UAAWC,IAAEsB,QAAlB,UACE,sBAAKvB,UAAWC,IAAEuB,aAAlB,UACE,oBAAIxB,UAAWC,IAAEwB,OAAjB,sBACA,oBAAGzB,UAAWC,IAAEE,KAAhB,UACE,qCADF,iIAEyE,IACvE,+CAHF,4DAIgB,2CAGlB,cAAC3B,EAAD","file":"static/js/AuthView.b87d2130.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AuthForm_form__1TYqy\",\"para\":\"AuthForm_para__1ZJps\",\"secondPara\":\"AuthForm_secondPara__1zWxA\",\"gBtn\":\"AuthForm_gBtn__1Dj5s\",\"btnWrapper\":\"AuthForm_btnWrapper__lEb5f\",\"gLogo\":\"AuthForm_gLogo__3mys2\",\"btnWrapperBottom\":\"AuthForm_btnWrapperBottom__2t2jY\",\"input\":\"AuthForm_input__2fchh\",\"regBtn\":\"AuthForm_regBtn__o63Rd\",\"forma\":\"AuthForm_forma__6WjSR\",\"innerForm\":\"AuthForm_innerForm__-dj7L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AuthView_wrapper__2F7ZN\",\"innerWrapper\":\"AuthView_innerWrapper__2yIDU\",\"header\":\"AuthView_header__1uafy\",\"para\":\"AuthView_para__1KnxA\"};","export default __webpack_public_path__ + \"static/media/google-logo.4088374a.png\";","import {\n  useState,\n  // useCallback, useEffect\n} from 'react';\nimport {\n  useDispatch,\n  // useSelector\n} from 'react-redux';\nimport { authOperations } from '../../redux/auth';\nimport s from './AuthForm.module.css';\nimport gIcon from '../../assets/icons/google-logo.png';\n// import Modal from '../Modal';\n// import { authSelectors } from '../../redux/auth';\n\nexport default function AuthForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n  // const [showModal, setShowModal] = useState(false);\n  // const userEmail = useSelector(state => state);\n  // const userCode = useSelector(authSelectors.getCode);\n  // const formatUserEmail = 'https://' + userEmail;\n  // const toggleModal = useCallback(() => {\n  //   setShowModal(prevShowModal => !prevShowModal);\n  // }, []);\n  // useEffect(() => {\n  //   toggleModal();\n  // }, [toggleModal, userCode]);\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const isEmailAndPasswordFill = (email, password) => {\n    if (!email.trim() && !password.trim()) {\n      return alert('Please write email and password!');\n    }\n    return true;\n  };\n\n  const handleClick = event => {\n    event.preventDefault();\n    const buttonName = event.target.dataset.auth;\n    if (isEmailAndPasswordFill(email, password)) {\n      switch (buttonName) {\n        case 'login':\n          dispatch(authOperations.logIn({ email, password }));\n          return;\n        case 'reg':\n          dispatch(authOperations.register({ email, password }));\n          return;\n        default:\n          return;\n      }\n    }\n    reset();\n  };\n\n  // const handleRegister = event => {\n  //   event.preventDefault();\n  //   if (isEmailAndPasswordFill(email, password)) {\n  //     dispatch(authOperations.register({ email, password }));\n  //   }\n  //   reset();\n  // };\n\n  return (\n    <div className={s.form}>\n      <p className={s.para}>For authorization you can use Google Account:</p>\n      <div className={s.btnWrapper}>\n        <a href=\"https://final-group-project-node.herokuapp.com/auth/google\">\n          <button className={s.gBtn} type=\"submit\">\n            Google\n          </button>\n          <img className={s.gLogo} src={gIcon} alt={'gIcon'} />\n        </a>\n      </div>\n      <p className={s.secondPara}>Or using e-mail and password:</p>\n      <form className={s.innerForm}>\n        <label>\n          <input\n            className={s.input}\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            onChange={handleChange}\n            required\n            value={email}\n          />\n        </label>\n        <label>\n          <input\n            className={s.input}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            onChange={handleChange}\n            required\n            value={password}\n          />\n        </label>\n        <div className={s.btnWrapperBottom}>\n          <button data-auth=\"login\" className={s.regBtn} onClick={handleClick}>\n            Log in\n          </button>\n          <button data-auth=\"reg\" className={s.regBtn} onClick={handleClick}>\n            Register\n          </button>\n        </div>\n      </form>\n      {/* {userCode === 201 && (\n        <Modal onClose={toggleModal}>\n          <p>\n            confirm registration on your{' '}\n            <a href={formatUserEmail}>{userEmail}</a>\n          </p>\n        </Modal>\n      )} */}\n    </div>\n  );\n}\n","import AuthForm from '../../components/AuthForm';\r\n// import Modal from '../../components/Modal';\r\nimport s from './AuthView.module.css';\r\n\r\nconst AuthView = () => {\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.innerWrapper}>\r\n        <h1 className={s.header}>Pro Test</h1>\r\n        <p className={s.para}>\r\n          <span>[</span> We will help you find weak points in knowledge so that\r\n          you can strengthen it. We will show you what is relevant to know for a{' '}\r\n          <span>QA Engineer</span> and will try to make the learning process\r\n          more diverse_ <span>]</span>\r\n        </p>\r\n      </div>\r\n      <AuthForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthView;\r\n"],"sourceRoot":""}